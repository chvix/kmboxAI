/* automatically generated by rust-bindgen 0.72.0 */

pub const KEY_NONE: u32 = 0;
pub const KEY_ERRORROLLOVER: u32 = 1;
pub const KEY_POSTFAIL: u32 = 2;
pub const KEY_ERRORUNDEFINED: u32 = 3;
pub const KEY_A: u32 = 4;
pub const KEY_B: u32 = 5;
pub const KEY_C: u32 = 6;
pub const KEY_D: u32 = 7;
pub const KEY_E: u32 = 8;
pub const KEY_F: u32 = 9;
pub const KEY_G: u32 = 10;
pub const KEY_H: u32 = 11;
pub const KEY_I: u32 = 12;
pub const KEY_J: u32 = 13;
pub const KEY_K: u32 = 14;
pub const KEY_L: u32 = 15;
pub const KEY_M: u32 = 16;
pub const KEY_N: u32 = 17;
pub const KEY_O: u32 = 18;
pub const KEY_P: u32 = 19;
pub const KEY_Q: u32 = 20;
pub const KEY_R: u32 = 21;
pub const KEY_S: u32 = 22;
pub const KEY_T: u32 = 23;
pub const KEY_U: u32 = 24;
pub const KEY_V: u32 = 25;
pub const KEY_W: u32 = 26;
pub const KEY_X: u32 = 27;
pub const KEY_Y: u32 = 28;
pub const KEY_Z: u32 = 29;
pub const KEY_1_EXCLAMATION_MARK: u32 = 30;
pub const KEY_2_AT: u32 = 31;
pub const KEY_3_NUMBER_SIGN: u32 = 32;
pub const KEY_4_DOLLAR: u32 = 33;
pub const KEY_5_PERCENT: u32 = 34;
pub const KEY_6_CARET: u32 = 35;
pub const KEY_7_AMPERSAND: u32 = 36;
pub const KEY_8_ASTERISK: u32 = 37;
pub const KEY_9_OPARENTHESIS: u32 = 38;
pub const KEY_0_CPARENTHESIS: u32 = 39;
pub const KEY_ENTER: u32 = 40;
pub const KEY_ESCAPE: u32 = 41;
pub const KEY_BACKSPACE: u32 = 42;
pub const KEY_TAB: u32 = 43;
pub const KEY_SPACEBAR: u32 = 44;
pub const KEY_MINUS_UNDERSCORE: u32 = 45;
pub const KEY_EQUAL_PLUS: u32 = 46;
pub const KEY_OBRACKET_AND_OBRACE: u32 = 47;
pub const KEY_CBRACKET_AND_CBRACE: u32 = 48;
pub const KEY_BACKSLASH_VERTICAL_BAR: u32 = 49;
pub const KEY_NONUS_NUMBER_SIGN_TILDE: u32 = 50;
pub const KEY_SEMICOLON_COLON: u32 = 51;
pub const KEY_SINGLE_AND_DOUBLE_QUOTE: u32 = 52;
pub const KEY_COMMA_AND_LESS: u32 = 54;
pub const KEY_DOT_GREATER: u32 = 55;
pub const KEY_SLASH_QUESTION: u32 = 56;
pub const KEY_F1: u32 = 58;
pub const KEY_F2: u32 = 59;
pub const KEY_F3: u32 = 60;
pub const KEY_F4: u32 = 61;
pub const KEY_F5: u32 = 62;
pub const KEY_F6: u32 = 63;
pub const KEY_F7: u32 = 64;
pub const KEY_F8: u32 = 65;
pub const KEY_F9: u32 = 66;
pub const KEY_F10: u32 = 67;
pub const KEY_F11: u32 = 68;
pub const KEY_F12: u32 = 69;
pub const KEY_PRINTSCREEN: u32 = 70;
pub const KEY_PAUSE: u32 = 72;
pub const KEY_INSERT: u32 = 73;
pub const KEY_HOME: u32 = 74;
pub const KEY_PAGEUP: u32 = 75;
pub const KEY_DELETE: u32 = 76;
pub const KEY_END1: u32 = 77;
pub const KEY_PAGEDOWN: u32 = 78;
pub const KEY_RIGHTARROW: u32 = 79;
pub const KEY_LEFTARROW: u32 = 80;
pub const KEY_DOWNARROW: u32 = 81;
pub const KEY_UPARROW: u32 = 82;
pub const KEY_KEYPAD_NUM_LOCK_AND_CLEAR: u32 = 83;
pub const KEY_KEYPAD_SLASH: u32 = 84;
pub const KEY_KEYPAD_ASTERIKS: u32 = 85;
pub const KEY_KEYPAD_MINUS: u32 = 86;
pub const KEY_KEYPAD_PLUS: u32 = 87;
pub const KEY_KEYPAD_ENTER: u32 = 88;
pub const KEY_KEYPAD_1_END: u32 = 89;
pub const KEY_KEYPAD_2_DOWN_ARROW: u32 = 90;
pub const KEY_KEYPAD_3_PAGEDN: u32 = 91;
pub const KEY_KEYPAD_4_LEFT_ARROW: u32 = 92;
pub const KEY_KEYPAD_5: u32 = 93;
pub const KEY_KEYPAD_6_RIGHT_ARROW: u32 = 94;
pub const KEY_KEYPAD_7_HOME: u32 = 95;
pub const KEY_KEYPAD_8_UP_ARROW: u32 = 96;
pub const KEY_KEYPAD_9_PAGEUP: u32 = 97;
pub const KEY_KEYPAD_0_INSERT: u32 = 98;
pub const KEY_KEYPAD_DECIMAL_SEPARATOR_DELETE: u32 = 99;
pub const KEY_NONUS_BACK_SLASH_VERTICAL_BAR: u32 = 100;
pub const KEY_APPLICATION: u32 = 101;
pub const KEY_POWER: u32 = 102;
pub const KEY_KEYPAD_EQUAL: u32 = 103;
pub const KEY_F13: u32 = 104;
pub const KEY_F14: u32 = 105;
pub const KEY_F15: u32 = 106;
pub const KEY_F16: u32 = 107;
pub const KEY_F17: u32 = 108;
pub const KEY_F18: u32 = 109;
pub const KEY_F19: u32 = 110;
pub const KEY_F20: u32 = 111;
pub const KEY_F21: u32 = 112;
pub const KEY_F22: u32 = 113;
pub const KEY_F23: u32 = 114;
pub const KEY_F24: u32 = 115;
pub const KEY_EXECUTE: u32 = 116;
pub const KEY_HELP: u32 = 117;
pub const KEY_MENU: u32 = 118;
pub const KEY_SELECT: u32 = 119;
pub const KEY_STOP: u32 = 120;
pub const KEY_AGAIN: u32 = 121;
pub const KEY_UNDO: u32 = 122;
pub const KEY_CUT: u32 = 123;
pub const KEY_COPY: u32 = 124;
pub const KEY_PASTE: u32 = 125;
pub const KEY_FIND: u32 = 126;
pub const KEY_MUTE: u32 = 127;
pub const KEY_VOLUME_UP: u32 = 128;
pub const KEY_VOLUME_DOWN: u32 = 129;
pub const KEY_LOCKING_CAPS_LOCK: u32 = 130;
pub const KEY_LOCKING_NUM_LOCK: u32 = 131;
pub const KEY_LOCKING_SCROLL_LOCK: u32 = 132;
pub const KEY_KEYPAD_COMMA: u32 = 133;
pub const KEY_KEYPAD_EQUAL_SIGN: u32 = 134;
pub const KEY_INTERNATIONAL1: u32 = 135;
pub const KEY_INTERNATIONAL2: u32 = 136;
pub const KEY_INTERNATIONAL3: u32 = 137;
pub const KEY_INTERNATIONAL4: u32 = 138;
pub const KEY_INTERNATIONAL5: u32 = 139;
pub const KEY_INTERNATIONAL6: u32 = 140;
pub const KEY_INTERNATIONAL7: u32 = 141;
pub const KEY_INTERNATIONAL8: u32 = 142;
pub const KEY_INTERNATIONAL9: u32 = 143;
pub const KEY_LANG1: u32 = 144;
pub const KEY_LANG2: u32 = 145;
pub const KEY_LANG3: u32 = 146;
pub const KEY_LANG4: u32 = 147;
pub const KEY_LANG5: u32 = 148;
pub const KEY_LANG6: u32 = 149;
pub const KEY_LANG7: u32 = 150;
pub const KEY_LANG8: u32 = 151;
pub const KEY_LANG9: u32 = 152;
pub const KEY_ALTERNATE_ERASE: u32 = 153;
pub const KEY_SYSREQ: u32 = 154;
pub const KEY_CANCEL: u32 = 155;
pub const KEY_CLEAR: u32 = 156;
pub const KEY_PRIOR: u32 = 157;
pub const KEY_RETURN: u32 = 158;
pub const KEY_SEPARATOR: u32 = 159;
pub const KEY_OUT: u32 = 160;
pub const KEY_OPER: u32 = 161;
pub const KEY_CLEAR_AGAIN: u32 = 162;
pub const KEY_CRSEL: u32 = 163;
pub const KEY_EXSEL: u32 = 164;
pub const KEY_KEYPAD_00: u32 = 176;
pub const KEY_KEYPAD_000: u32 = 177;
pub const KEY_THOUSANDS_SEPARATOR: u32 = 178;
pub const KEY_DECIMAL_SEPARATOR: u32 = 179;
pub const KEY_CURRENCY_UNIT: u32 = 180;
pub const KEY_CURRENCY_SUB_UNIT: u32 = 181;
pub const KEY_KEYPAD_OPARENTHESIS: u32 = 182;
pub const KEY_KEYPAD_CPARENTHESIS: u32 = 183;
pub const KEY_KEYPAD_OBRACE: u32 = 184;
pub const KEY_KEYPAD_CBRACE: u32 = 185;
pub const KEY_KEYPAD_TAB: u32 = 186;
pub const KEY_KEYPAD_BACKSPACE: u32 = 187;
pub const KEY_KEYPAD_A: u32 = 188;
pub const KEY_KEYPAD_B: u32 = 189;
pub const KEY_KEYPAD_C: u32 = 190;
pub const KEY_KEYPAD_D: u32 = 191;
pub const KEY_KEYPAD_E: u32 = 192;
pub const KEY_KEYPAD_F: u32 = 193;
pub const KEY_KEYPAD_XOR: u32 = 194;
pub const KEY_KEYPAD_CARET: u32 = 195;
pub const KEY_KEYPAD_PERCENT: u32 = 196;
pub const KEY_KEYPAD_LESS: u32 = 197;
pub const KEY_KEYPAD_GREATER: u32 = 198;
pub const KEY_KEYPAD_AMPERSAND: u32 = 199;
pub const KEY_KEYPAD_LOGICAL_AND: u32 = 200;
pub const KEY_KEYPAD_VERTICAL_BAR: u32 = 201;
pub const KEY_KEYPAD_LOGIACL_OR: u32 = 202;
pub const KEY_KEYPAD_COLON: u32 = 203;
pub const KEY_KEYPAD_NUMBER_SIGN: u32 = 204;
pub const KEY_KEYPAD_SPACE: u32 = 205;
pub const KEY_KEYPAD_AT: u32 = 206;
pub const KEY_KEYPAD_EXCLAMATION_MARK: u32 = 207;
pub const KEY_KEYPAD_MEMORY_STORE: u32 = 208;
pub const KEY_KEYPAD_MEMORY_RECALL: u32 = 209;
pub const KEY_KEYPAD_MEMORY_CLEAR: u32 = 210;
pub const KEY_KEYPAD_MEMORY_ADD: u32 = 211;
pub const KEY_KEYPAD_MEMORY_SUBTRACT: u32 = 212;
pub const KEY_KEYPAD_MEMORY_MULTIPLY: u32 = 213;
pub const KEY_KEYPAD_MEMORY_DIVIDE: u32 = 214;
pub const KEY_KEYPAD_PLUSMINUS: u32 = 215;
pub const KEY_KEYPAD_CLEAR: u32 = 216;
pub const KEY_KEYPAD_CLEAR_ENTRY: u32 = 217;
pub const KEY_KEYPAD_BINARY: u32 = 218;
pub const KEY_KEYPAD_OCTAL: u32 = 219;
pub const KEY_KEYPAD_DECIMAL: u32 = 220;
pub const KEY_KEYPAD_HEXADECIMAL: u32 = 221;
pub const KEY_LEFTCONTROL: u32 = 224;
pub const KEY_LEFTSHIFT: u32 = 225;
pub const KEY_LEFTALT: u32 = 226;
pub const KEY_LEFT_GUI: u32 = 227;
pub const KEY_RIGHTCONTROL: u32 = 228;
pub const KEY_RIGHTSHIFT: u32 = 229;
pub const KEY_RIGHTALT: u32 = 230;
pub const KEY_RIGHT_GUI: u32 = 231;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct key_name_val_t {
    pub str_: *mut ::std::os::raw::c_char,
    pub hex: ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of key_name_val_t"][::std::mem::size_of::<key_name_val_t>() - 16usize];
    ["Alignment of key_name_val_t"][::std::mem::align_of::<key_name_val_t>() - 8usize];
    ["Offset of field: key_name_val_t::str_"]
        [::std::mem::offset_of!(key_name_val_t, str_) - 0usize];
    ["Offset of field: key_name_val_t::hex"][::std::mem::offset_of!(key_name_val_t, hex) - 8usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_Z15getKeyHexByNamePKc"]
    pub fn getKeyHexByName(str_: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}_Z12soft_keydowniPKc"]
    pub fn soft_keydown(value: ::std::os::raw::c_int, str_name: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    #[link_name = "\u{1}_Z10soft_keyupiPKc"]
    pub fn soft_keyup(value: ::std::os::raw::c_int, str_name: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    #[link_name = "\u{1}_Z13soft_keypressiPKci"]
    pub fn soft_keypress(
        value: ::std::os::raw::c_int,
        str_name: *const ::std::os::raw::c_char,
        t1: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_Z15check_keyisdowniPKc"]
    pub fn check_keyisdown(
        value: ::std::os::raw::c_int,
        str_name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}_Z9showTablev"]
    pub fn showTable();
}
unsafe extern "C" {
    #[link_name = "\u{1}_Z9soft_maskiPKci"]
    pub fn soft_mask(
        value: ::std::os::raw::c_int,
        str_name: *const ::std::os::raw::c_char,
        val: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}_Z11soft_ismaskiPKc"]
    pub fn soft_ismask(
        value: ::std::os::raw::c_int,
        str_name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}_Z11soft_StringPKc"]
    pub fn soft_String(string: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
